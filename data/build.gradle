apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


android {
    compileSdkVersion(compileSdk)
    buildToolsVersion(buildTools)

    defaultConfig {
        minSdkVersion(minSdk)
        targetSdkVersion(targetSdk)
        versionCode = 30400
        versionName = "3.4.0"
    }

    buildTypes {
        debug {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"
    productFlavors {
        fabric {
        }

        fabricfree {
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

androidExtensions { experimental = true }

dependencies {
    implementation("org.jetbrains:annotations:$jetbrainsAnnotations")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-android-extensions-runtime:$kotlinVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVersion")

    implementation("androidx.annotation:annotation:$androidxAnnotation")
    implementation("androidx.core:core:$androidxCore")

    implementation("io.reactivex:rxjava:$rxJava")
    implementation("com.jakewharton.rxrelay:rxrelay:$rxRelay")

    implementation("io.netty:netty-codec-http:$netty")
    implementation("io.netty:netty-handler:$netty")
    implementation("io.reactivex:rxnetty-common:$rxNetty")
    implementation("io.reactivex:rxnetty-http:$rxNetty")

    implementation("com.google.zxing:core:$zxing")

    implementation("com.github.iamironz:binaryprefs:$binaryprefs")
    implementation("com.elvishew:xlog:$xlog")
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"]
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.FlowPreview"]
}